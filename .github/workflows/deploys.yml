name: Deploy Notifications

on:
  # Only react to deployment status changes (not "deployment" creation)
  deployment_status:

jobs:
  notify:
    name: Post selective deploy updates
    runs-on: ubuntu-latest

    # Map secrets ‚Üí env once; use env.* in if: and scripts
    env:
      DISCORD_DEPLOY: ${{ secrets.DISCORD_DEPLOY }}
      DISCORD_DEPLOY_ALT: ${{ secrets.Discord_Deploy }}

    # Only run for these states
    if: contains(fromJson('["in_progress","success","failure"]'), github.event.deployment_status.state)

    steps:
      - name: Build message
        id: msg
        shell: bash
        run: |
          repo="${{ github.repository }}"
          env_name="${{ github.event.deployment.environment }}"
          state="${{ github.event.deployment_status.state }}"
          url="${{ github.event.deployment_status.environment_url }}"
          sha="${{ github.event.deployment.sha }}"
          short_sha="${sha:0:7}"

          case "$state" in
            in_progress)
              content="üöÄ Deployment **started** for **$repo** ‚Üí **$env_name** (\`$short_sha\`)"
              ;;
            success)
              content="‚úÖ Deployment **succeeded** for **$repo** ‚Üí **$env_name** (\`$short_sha\`)"
              ;;
            failure|error)
              content="‚ùå Deployment **failed** for **$repo** ‚Üí **$env_name** (\`$short_sha\`)"
              ;;
          esac

          if [ -n "$url" ] && [ "$state" = "success" ]; then
            content="$content\n$url"
          fi

          {
            echo "content<<EOF"
            echo "$content"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post to Discord (if secret present and not from fork)
        if: ${{ (env.DISCORD_DEPLOY != '' || env.DISCORD_DEPLOY_ALT != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
        shell: bash
        run: |
          # Choose whichever secret is set
          WEBHOOK="${DISCORD_DEPLOY:-}"
          if [ -z "$WEBHOOK" ] && [ -n "${DISCORD_DEPLOY_ALT:-}" ]; then
            WEBHOOK="$DISCORD_DEPLOY_ALT"
          fi

          jq -n --arg content "${{ steps.msg.outputs.content }}" --arg username "Deploy Bot" \
            '{username:$username, content:$content}' \
          | curl -sS -H "Content-Type: application/json" -d @- "$WEBHOOK"
